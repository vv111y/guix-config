#+TITLE: Workstation - Felix
#+STARTUP: content
#+PROPERTY: header-args :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:CONTENTS:
:END:

* Dependencies
#+NAME: dependencies
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
(use-modules (gnu home)
             (gnu home-services)
             (gnu home-services shells)
             (gnu services)
             (guix build utils)
             (gnu packages admin)
             (guix gexp))

(load "../manifests/dotfiles.scm")

(define build-file-service (lambda (file)
  (simple-service 'load-build-files
                   home-files-service-type
                   (list
                     `((string-append "config/" file)
                     ,(local-file
                      (string-append "build/" file) "abc"))))))
#+end_src

* home environment

#+name: profiles
#+begin_src scheme  :tangle build/guix/felix.scm
  (home-environment
#+end_src

** home packages

Like other configurations you may have seen, I leverage guix's manifest files to organize packages by context.
#+NAME: profiles
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
  (packages (list "tree"))
#+END_SRC

** Home Services (i.e dotfiles)

Guix Home defines "services" not as Shepherd services, like Guix does, but as plugins to perform a build action on your home environment.

#+NAME: home-services
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
(services
  (list
#+END_SRC

*** Keyboard
#+NAME: home-services-keyboard
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
;;   (service home-keyboard-service-type
;;           (keyboard-layout (keyboard-layout "us"
;;                                    #:options '("ctrl:nocaps"))))
#+END_SRC

*** Shells
**** Bash
#+NAME: home-services
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
   (service home-bash-service-type
            (home-bash-configuration
             (guix-defaults? #f)
             (bashrc '(
   "# Export 'SHELL' to child processes.  Programs such as 'screen'
    # honor it and otherwise use /bin/sh.
    export SHELL
    
    # Export 'GUIX_PROFILE'. Sources all guix package environment variables,
    # for example,if we install python and Python libraries, PYTHONPATH
    # will be defined.
    export GUIX_PROFILE=\"$HOME/.guix-profile\"
    
    # Few other useful exports
    export LANG=en_US.UTF-8
    export LIBGL_ALWAYS_INDIRECT=1 # Silenced a few warnings, otherwise not sure
    
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in \"ssh host command\"), source
    # /etc/profile so we get PATH and other essential variables.
    if [[ $- != *i* ]]
    then
        [[ -n \"$SSH_CLIENT\" ]] && source \"$GUIX_PROFILE/etc/profile\"
    
        # Don't do anything else.
        return
    fi
    
    # Source system-wide configuration
    # i.e run everything in these files
    source /etc/bashrc
    source \"$GUIX_PROFILE/etc/profile\"
    
    # oh-my-BASH!
    # https://ohmybash.nntoan.com/
    export OSH=$HOME/Resources/code/oh-my-bash
    export OSH_THEME=\"agnoster\"
    export HYPEN_INSENSITIVE=\"true\"
    export COMPLETION_WAITING_DOTS=\"true\"
    source $OSH/oh-my-bash.sh
    # ~~*~-~*~-~*~~*~-~*~-~*~~*~-~*~-~*~~*~-~*~-~*~**~~*~-~*~-~*~"))))
#+END_SRC

*** Window Manager
#+NAME: load-dotfiles
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
;; Load a list of dotfiles from build, and map over those to add to .config
   (map build-file-service dotfiles))))
#+END_SRC

#+NAME: load-dotfiles
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
;; Load a list of dotfiles from build, and map over those to add to .config
;;   (map 
;;     (simple-service 'load-build-files
;;       home-files-service-type
;;         (list
;;           `((string-append "config/" dotfile) ;; config location
;;           ,(local-file
;;            (string-append "build/" dotfile "abc")))) dotfiles))))) ;; build location
#+END_SRC


* Operating System Definition

#+NAME: services
#+BEGIN_SRC scheme  :tangle build/guix/felix.scm
;;(operating-system
;;  (inherit desktop-operating-system)
;;  (host-name "felix"))
#+END_SRC
